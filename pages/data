import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
import pyodbc

# CSS for styling the login page
login_page_css = """
<style>
body {
    background-color: #f0f2f6;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.container {
    max-width: 400px;
    margin: auto;
    padding: 20px;
    border-radius: 10px;
    background-color: #ffffff;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    margin-top: 50px;
}

h1 {
    text-align: center;
    color: #333333;
    font-size: 24px;
    margin-bottom: 20px;
}

label {
    font-weight: bold;
    color: #555555;
    margin-bottom: 5px;
    display: block;
}

input[type="text"], input[type="password"] {
    width: 100%;
    padding: 10px;
    margin: 8px 0;
    box-sizing: border-box;
    border: 1px solid #cccccc;
    border-radius: 5px;
    background-color: #f9f9f9;
}

button {
    width: 100%;
    padding: 10px;
    margin-top: 5px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 10px;
}

button:hover {
    background-color: #45a049;
}

.error-message {
    color: #ff0000;
    margin-top: 10px;
}

.success-message {
    color: #4CAF50;
    margin-top: 10px;
}

.info-message {
    color: #333333;
    margin-top: 10px;
}

.logged-in-message {
    color: #333333;
    font-weight: bold;
    position: absolute;
    top: 10px;
    right: 10px;
}
</style>
"""

# Apply the CSS styling
st.markdown(login_page_css, unsafe_allow_html=True)

# Top-right logged-in message


col1, col2 = st.columns([3, 1])

if st.session_state.get('username'):
    with col1:
        st.markdown(f'<p class="logged-in-message">Logged in as {st.session_state["username"]}</p>', unsafe_allow_html=True)
    with col2:
        if st.button("Logout", key="logout"):
            st.session_state['username'] = None
            st.session_state['view'] = "login"
            st.success("You have been logged out.")
            st.experimental_rerun()


# Function to fetch userdata from the database
def fetch_userdata(start_date, end_date):
    username = st.session_state['username']
    with get_connection() as conn:
        query = """
        SELECT date, calories_added
        FROM [Userdata]
        WHERE username = ? AND date BETWEEN ? AND ?
        ORDER BY date
        """
        df = pd.read_sql(query, conn, params=(username, start_date, end_date))
    return df

# Function to create connection to MSSQL Server
def get_connection():
    return pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER=DESKTOP-KCKGKPJ\\MSSQLSERVER01;DATABASE=UserAuth;Trusted_Connection=yes')

def main():
    # Displaying image
    st.image("images/home_img.jpg")
    st.title('Food Detection Prediction System')

    st.write("Our Food Detection Prediction System offers users valuable insights into their dietary habits over time. By plotting the trend of calorie consumption over a specified period, users can visually track changes in their calorie intake, allowing for a deeper understanding of their eating patterns. This feature empowers users to make informed decisions about their diet and lifestyle by providing a clear visualization of their calorie consumption trends. Whether it's monitoring daily, weekly, or monthly calorie intake, Trend Analysis enables users to identify patterns, set goals, and make adjustments to achieve a healthier and more balanced diet. With this tool, users can take proactive steps towards achieving their health and wellness goals, making it an essential component of our Food Detection Prediction System")

    # Date selection widgets
    start_date = st.date_input('Start Date', datetime(2024, 5, 1))
    end_date = st.date_input('End Date', datetime(2024, 5, 31))

    # Fetch userdata from the database based on selected date range
    df = fetch_userdata(start_date, end_date)

    # Perform trend analysis and display the plot
    if not df.empty:
        st.subheader('Trend Analysis: Calorie Consumption Over Time')
        fig, trend_classification, mean_calories_per_month = perform_trend_analysis(df)
        st.pyplot(fig)

        # Display classification and mean calories per month
        if trend_classification:
            st.subheader(f'Trend Classification: {trend_classification.capitalize()}')
            st.write(f'Mean Calories : {mean_calories_per_month:.2f}')
    else:
        st.warning("No data available for the selected date range.")

# Function to perform trend analysis
def perform_trend_analysis(df):
    # Calculate mean calorie consumption per month (30 days)
    mean_calories_per_month = df['calories_added'].mean()

    # Determine if the trend is "good" or "bad" based on mean calories per month
    trend_classification = 'good' if mean_calories_per_month <= 100 else 'bad'

    # Create line chart
    fig, ax = plt.subplots()
    ax.plot(df['date'], df['calories_added'], marker='o', linestyle='-')
    ax.set_xlabel('Date')
    ax.set_ylabel('Calories')
    ax.set_title('Calorie Consumption Over Time')
    ax.grid(True)
    return fig, trend_classification, mean_calories_per_month

if st.session_state.get('username'):
    if __name__ == "__main__":
        main()
else:
    st.error("You are not logged in.")
